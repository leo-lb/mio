var N=null,E="",T="t",U="u",searchIndex={};
var R=["interest","registry","duration","result","token","is_readable","is_writable","is_aio","is_lio","events","register","reregister","deregister","try_from","try_into","borrow_mut","type_id","to_owned","clone_into","borrow","typeid","mio::event","ordering","partial_cmp","formatter","Interest","Registry"];

searchIndex["mio"]={"doc":"Mio is a fast, low-level I/O library for Rust focusing on…","i":[[3,R[25],"mio","Interest used in registering.",N,N],[3,"Poll",E,"Polls for readiness events on all registered values.",N,N],[3,R[26],E,"Registers I/O resources.",N,N],[3,"Token",E,"Associates readiness events with [`event::Source`]s.",N,N],[12,"0",E,E,0,N],[3,"Waker",E,"Waker allows cross-thread waking of [`Poll`].",N,N],[18,"READABLE",E,"Returns a `Interest` set representing readable interests.",1,N],[18,"WRITABLE",E,"Returns a `Interest` set representing writable interests.",1,N],[11,"add",E,"Add together two `Interest`.",1,[[[R[0]]],[R[0]]]],[11,R[5],E,"Returns true if the value includes readable readiness.",1,[[],["bool"]]],[11,R[6],E,"Returns true if the value includes writable readiness.",1,[[],["bool"]]],[11,R[7],E,"Returns true if `Interest` contains AIO readiness",1,[[],["bool"]]],[11,R[8],E,"Returns true if `Interest` contains LIO readiness",1,[[],["bool"]]],[11,R[1],E,"Create a separate `Registry` which can be used to register…",2,[[["self"]],[R[1]]]],[11,"poll",E,"Wait for readiness events",2,[[["self"],[R[9]],["option",[R[2]]],[R[2]]],[R[3]]]],[11,R[10],E,"Register an [`event::Source`] with the `Poll` instance.",3,[[["self"],["s"],[R[4]],[R[0]]],[R[3]]]],[11,R[11],E,"Re-register an [`event::Source`] with the `Poll` instance.",3,[[["self"],["s"],[R[4]],[R[0]]],[R[3]]]],[11,R[12],E,"Deregister an [`event::Source`] with the `Poll` instance.",3,[[["self"],["s"]],[R[3]]]],[11,"try_clone",E,"Creates a new independently owned `Registry`.",3,[[["self"]],[[R[3],[R[1]]],[R[1]]]]],[11,"new",E,"Create a new `Waker`.",4,[[[R[1]],[R[4]]],[["waker"],[R[3],["waker"]]]]],[11,"wake",E,"Wake up the [`Poll`] associated with this `Waker`.",4,[[["self"]],[R[3]]]],[0,"event",E,"Readiness event types and utilities.",N,N],[3,"Event",R[21],"A readiness event.",N,N],[3,"Events",E,"A collection of readiness events.",N,N],[3,"Iter",E,"[`Events`] iterator.",N,N],[11,R[4],E,"Returns the event's token.",5,[[["self"]],[R[4]]]],[11,R[5],E,"Returns true if the event contains readable readiness.",5,[[["self"]],["bool"]]],[11,R[6],E,"Returns true if the event contains writable readiness.",5,[[["self"]],["bool"]]],[11,"is_error",E,"Returns true if the event contains error readiness.",5,[[["self"]],["bool"]]],[11,"is_read_closed",E,"Returns true if the event contains read closed readiness.",5,[[["self"]],["bool"]]],[11,"is_write_closed",E,"Returns true if the event contains write closed readiness.",5,[[["self"]],["bool"]]],[11,"is_priority",E,"Returns true if the event contains priority readiness.",5,[[["self"]],["bool"]]],[11,R[7],E,"Returns true if the event contains AIO readiness.",5,[[["self"]],["bool"]]],[11,R[8],E,"Returns true if the event contains LIO readiness.",5,[[["self"]],["bool"]]],[11,"with_capacity",E,"Return a new `Events` capable of holding up to `capacity`…",6,[[["usize"]],[R[9]]]],[11,"capacity",E,"Returns the number of `Event` values that `self` can hold.",6,[[["self"]],["usize"]]],[11,"is_empty",E,"Returns `true` if `self` contains no `Event` values.",6,[[["self"]],["bool"]]],[11,"iter",E,"Returns an iterator over the `Event` values.",6,[[["self"]],["iter"]]],[11,"clear",E,"Clearing all `Event` values from container explicitly.",6,[[["self"]]]],[8,"Source",E,"An event source that may be registered with [`Registry`].",N,N],[10,R[10],E,"Register `self` with the given `Registry` instance.",7,[[["self"],[R[1]],[R[4]],[R[0]]],[R[3]]]],[10,R[11],E,"Re-register `self` with the given `Registry` instance.",7,[[["self"],[R[1]],[R[4]],[R[0]]],[R[3]]]],[10,R[12],E,"Deregister `self` from the given `Registry` instance.",7,[[["self"],[R[1]]],[R[3]]]],[11,R[17],"mio",E,1,[[["self"]],[T]]],[11,R[18],E,E,1,[[["self"],[T]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[13],E,E,1,[[[U]],[R[3]]]],[11,R[14],E,E,1,[[],[R[3]]]],[11,R[15],E,E,1,[[["self"]],[T]]],[11,R[19],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[R[20]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[13],E,E,2,[[[U]],[R[3]]]],[11,R[14],E,E,2,[[],[R[3]]]],[11,R[15],E,E,2,[[["self"]],[T]]],[11,R[19],E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,[[["self"]],[R[20]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[13],E,E,3,[[[U]],[R[3]]]],[11,R[14],E,E,3,[[],[R[3]]]],[11,R[15],E,E,3,[[["self"]],[T]]],[11,R[19],E,E,3,[[["self"]],[T]]],[11,R[16],E,E,3,[[["self"]],[R[20]]]],[11,R[17],E,E,0,[[["self"]],[T]]],[11,R[18],E,E,0,[[["self"],[T]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[13],E,E,0,[[[U]],[R[3]]]],[11,R[14],E,E,0,[[],[R[3]]]],[11,R[15],E,E,0,[[["self"]],[T]]],[11,R[19],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[R[20]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[13],E,E,4,[[[U]],[R[3]]]],[11,R[14],E,E,4,[[],[R[3]]]],[11,R[15],E,E,4,[[["self"]],[T]]],[11,R[19],E,E,4,[[["self"]],[T]]],[11,R[16],E,E,4,[[["self"]],[R[20]]]],[11,"into",R[21],E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[13],E,E,5,[[[U]],[R[3]]]],[11,R[14],E,E,5,[[],[R[3]]]],[11,R[15],E,E,5,[[["self"]],[T]]],[11,R[19],E,E,5,[[["self"]],[T]]],[11,R[16],E,E,5,[[["self"]],[R[20]]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[13],E,E,6,[[[U]],[R[3]]]],[11,R[14],E,E,6,[[],[R[3]]]],[11,R[15],E,E,6,[[["self"]],[T]]],[11,R[19],E,E,6,[[["self"]],[T]]],[11,R[16],E,E,6,[[["self"]],[R[20]]]],[11,R[17],E,E,8,[[["self"]],[T]]],[11,R[18],E,E,8,[[["self"],[T]]]],[11,"into",E,E,8,[[],[U]]],[11,"into_iter",E,E,8,[[],["i"]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[13],E,E,8,[[[U]],[R[3]]]],[11,R[14],E,E,8,[[],[R[3]]]],[11,R[15],E,E,8,[[["self"]],[T]]],[11,R[19],E,E,8,[[["self"]],[T]]],[11,R[16],E,E,8,[[["self"]],[R[20]]]],[11,"clone","mio",E,1,[[["self"]],[R[0]]]],[11,"clone",E,E,0,[[["self"]],[R[4]]]],[11,"clone",R[21],E,8,[[["self"]],["iter"]]],[11,R[23],"mio",E,1,[[["self"],[R[0]]],[["option",[R[22]]],[R[22]]]]],[11,"lt",E,E,1,[[["self"],[R[0]]],["bool"]]],[11,"le",E,E,1,[[["self"],[R[0]]],["bool"]]],[11,"gt",E,E,1,[[["self"],[R[0]]],["bool"]]],[11,"ge",E,E,1,[[["self"],[R[0]]],["bool"]]],[11,R[23],E,E,0,[[["self"],[R[4]]],[["option",[R[22]]],[R[22]]]]],[11,"lt",E,E,0,[[["self"],[R[4]]],["bool"]]],[11,"le",E,E,0,[[["self"],[R[4]]],["bool"]]],[11,"gt",E,E,0,[[["self"],[R[4]]],["bool"]]],[11,"ge",E,E,0,[[["self"],[R[4]]],["bool"]]],[11,"eq",E,E,1,[[["self"],[R[0]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[0]]],["bool"]]],[11,"eq",E,E,0,[[["self"],[R[4]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[4]]],["bool"]]],[11,"cmp",E,E,1,[[["self"],[R[0]]],[R[22]]]],[11,"cmp",E,E,0,[[["self"],[R[4]]],[R[22]]]],[11,"next",R[21],E,8,[[["self"]],["option"]]],[11,"hash","mio",E,0,[[["self"],["__h"]]]],[11,"bitor",E,E,1,[[],["self"]]],[11,"bitor_assign",E,E,1,[[["self"]]]],[11,"fmt",E,E,1,[[["self"],[R[24]]],[R[3]]]],[11,"fmt",E,E,2,[[["self"],[R[24]]],[R[3]]]],[11,"fmt",E,E,3,[[["self"],[R[24]]],[R[3]]]],[11,"fmt",E,E,0,[[["self"],[R[24]]],[R[3]]]],[11,"fmt",E,E,4,[[["self"],[R[24]]],[R[3]]]],[11,"fmt",R[21],E,5,[[["self"],[R[24]]],[R[3]]]],[11,"fmt",E,E,8,[[["self"],[R[24]]],[R[3]]]],[11,"fmt",E,E,6,[[["self"],[R[24]]],[R[3]]]],[11,"as_raw_fd","mio",E,2,[[["self"]],["rawfd"]]]],"p":[[3,"Token"],[3,R[25]],[3,"Poll"],[3,R[26]],[3,"Waker"],[3,"Event"],[3,"Events"],[8,"Source"],[3,"Iter"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);